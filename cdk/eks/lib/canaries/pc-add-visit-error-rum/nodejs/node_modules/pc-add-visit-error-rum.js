const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();

const flowBuilderBlueprint = async function () {
    let url = "http://a61dafdaceaa340d5b3fc9d3a00f71c6-746455772.us-east-1.elb.amazonaws.com/#!/owners/details/1";

    syntheticsConfiguration.setConfig({
        includeRequestHeaders: true, // Enable if headers should be displayed in HAR
        includeResponseHeaders: true, // Enable if headers should be displayed in HAR
        restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
        restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports
    });

    // Configure the user agent for RUM
    const page = await synthetics.getPage();
    const chromeUserAgent =
        'HTC Mozilla/5.0 (Linux; Android 7.0; HTC 10 Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.83 Mobile Safari/537.36';
    await page.setUserAgent(chromeUserAgent);

    // Navigate to the initial url
    await synthetics.executeStep('navigateToUrl', async function (timeoutInMillis = 120000) {
        await page.goto(url, {waitUntil: ['load', 'networkidle0'], timeout: timeoutInMillis});
    });

    // Click on Add Visit button
    await synthetics.executeStep('click add visit', async function () {
        await page.waitForSelector("body > div > div > div > ui-view > owner-details > table:nth-child(4) > tbody > tr:nth-child(1) > td:nth-child(2) > table > tbody > tr > td:nth-child(2) > a", { timeout: 30000 });
        await Promise.all([
            page.click("body > div > div > div > ui-view > owner-details > table:nth-child(4) > tbody > tr:nth-child(1) > td:nth-child(2) > table > tbody > tr > td:nth-child(2) > a"),
            page.waitForNavigation({ timeout: 30000 })
        ]);
    });

    // Wait for form to load
    await page.waitForTimeout(5000);

    // Input future date
    await synthetics.executeStep('input date', async function () {
        await page.waitForSelector("body > div > div > div > ui-view > visits > form > div:nth-child(1) > input", { timeout: 30000 });

        // Calculate a date 31 days from now
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + 31);

        // Format the date as MM/DD/YYYY
        const month = (futureDate.getMonth() + 1).toString().padStart(2, '0');
        const day = futureDate.getDate().toString().padStart(2, '0');
        const year = futureDate.getFullYear();
        const formattedDate = `${month}/${day}/${year}`;

        await page.type("body > div > div > div > ui-view > visits > form > div:nth-child(1) > input", formattedDate);
    });

    // Input description
    await synthetics.executeStep('input description', async function () {
        await page.waitForSelector("body > div > div > div > ui-view > visits > form > div:nth-child(2) > textarea", { timeout: 30000 });
        await page.type("body > div > div > div > ui-view > visits > form > div:nth-child(2) > textarea", "Test visit more than 30 days in future");
    });

    // Click submit button and wait for 400 response
    await synthetics.executeStep('click submit', async function () {
        await page.waitForSelector("body > div > div > div > ui-view > visits > form > div:nth-child(3) > button", { timeout: 30000 });

        // Set up response listener before clicking
        const responsePromise = page.waitForResponse(
            response => response.url().includes('/api/visit') && response.status() === 400,
            { timeout: 30000 }
        );

        // Click the submit button
        await page.click("body > div > div > div > ui-view > visits > form > div:nth-child(3) > button");

        // Wait for the 400 response
        try {
            const response = await responsePromise;
            log.info('Received expected 400 status code');
        } catch (error) {
            throw new Error('Did not receive expected 400 status code: ' + error.message);
        }
    });

    // Wait for RUM dispatch
    await new Promise((r) => setTimeout(r, 6000));
};

exports.handler = async () => {
    return await flowBuilderBlueprint();
};
